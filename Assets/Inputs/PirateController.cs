//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.12.0
//     from Assets/Inputs/PirateController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Inputs/PirateController.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PirateController: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PirateController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PirateController"",
    ""maps"": [
        {
            ""name"": ""ShipControl"",
            ""id"": ""34b03dbe-6243-456b-bc07-bb0a6fd058dd"",
            ""actions"": [
                {
                    ""name"": ""ShipAccelerate"",
                    ""type"": ""Value"",
                    ""id"": ""1644081a-4143-4db8-8deb-f8b577f580cb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShipTurn"",
                    ""type"": ""Value"",
                    ""id"": ""11acfb17-61d8-48a0-8269-c5192578351e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShipCameraTurn"",
                    ""type"": ""Value"",
                    ""id"": ""39aef420-c320-4a7d-ae10-4c5b4c24a1bc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShipMousePos"",
                    ""type"": ""Value"",
                    ""id"": ""328aba3a-62f3-416f-8777-a9de54601b25"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShipSwap"",
                    ""type"": ""Button"",
                    ""id"": ""8c21efbc-aa52-4757-9a1a-fc2c4c795a38"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a17be9d0-9868-43f1-81d4-1204828cfd16"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShipTurn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a9c45b64-8023-4902-b12f-32db919c1d37"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""ShipTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""08aaea0d-574d-4141-aed0-c1e7229d27c4"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Xbox Controller"",
                    ""action"": ""ShipTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""ac721109-c9e5-4a06-b741-4997fb73ec5c"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Xbox Controller"",
                    ""action"": ""ShipTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a5f097fb-825c-4e43-b510-900415103c54"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""ShipTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""54737711-8f13-4a55-9b27-3f92ba95fc2e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShipAccelerate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""77bb2766-0eb1-4670-ac4f-509fc49e15e1"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShipAccelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""75fc2a16-0b10-4554-94c6-034399b99a3f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""ShipAccelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""35842f1c-f893-4894-a33f-03dc2d317339"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""ShipAccelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7832f907-262c-4af8-a06f-f17a8290239e"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Xbox Controller"",
                    ""action"": ""ShipAccelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8ddacef4-fda1-4220-bcbf-a0363735e38a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShipCameraTurn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""dcf57fa5-035b-4141-bb88-fe5bc6a32881"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShipCameraTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""072a65f7-ccec-472e-82ba-af83dac920ad"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShipCameraTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""f2c878ee-0967-40ee-8037-7c779e16b8a2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShipCameraTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""291f9152-888f-4004-865d-e7922bd81117"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShipCameraTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""67acbc20-f822-431c-8483-e3ece1c72eea"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""ShipMousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2a20a94-6d12-4082-a900-8d02725e57bd"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""ShipSwap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PirateControl"",
            ""id"": ""ecd7d918-9811-4da8-91bf-dd5f667d3f48"",
            ""actions"": [
                {
                    ""name"": ""PirateForward"",
                    ""type"": ""Button"",
                    ""id"": ""1220e9d2-ff36-48b7-8677-b44a812d5f5b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PirateStrafe"",
                    ""type"": ""Button"",
                    ""id"": ""692ed4ee-e760-4fcc-91ab-c8686c3f4e22"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PirateCameraRotate"",
                    ""type"": ""Button"",
                    ""id"": ""bc30fd70-b5ea-45b4-9894-7a80fa73427a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PirateMousePos"",
                    ""type"": ""Value"",
                    ""id"": ""1d97db33-5f6e-42b4-9010-a2871e33e522"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PirateSwap"",
                    ""type"": ""Button"",
                    ""id"": ""cbf6df0e-9807-4c1f-b7c5-88a045b33344"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PirateInteract"",
                    ""type"": ""Button"",
                    ""id"": ""bf926d72-6323-4d39-afd8-7647b3366c23"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PirateSubmit"",
                    ""type"": ""Button"",
                    ""id"": ""05afd1ba-59c5-4e7c-aa97-4892b9a971fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PirateMouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""feffbaee-6d90-4649-bd5f-67b2ef2eb700"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d19d7e0f-73eb-4ff9-8e0c-6fe51ea4ef91"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PirateForward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8617de24-bd51-43ac-9c39-85cf10921688"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2790d069-fdc1-42fa-8ca4-6e863cda05fc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""ee0529b6-473a-4a76-babe-6c716db97174"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PirateStrafe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""66d8e7d0-ad71-41f3-a95e-5495dc2cfdc4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateStrafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b815f02e-c483-4d23-ac9b-62b354dd003d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateStrafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c0f5aa1e-97eb-4066-a455-4bc5166a4759"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateSwap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""db706e48-a9c2-40c8-8654-8eb2b2ba19bf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PirateCameraRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c0703f06-7187-46b8-a458-dbaf7e66ef2c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateCameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7b0a6a1c-ecb2-4f73-89c6-7e8b7a85fb7f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateCameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""92d53da6-a4f7-4867-8bcf-40bf4d421f98"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PirateMousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbbfd095-c6cb-4c4f-93cb-a797c1b66734"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0864c32a-bb65-400e-9f52-c3b4cb2ede04"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateSubmit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f2bb248-e81c-438f-8280-7b90d234403e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";K+M"",
                    ""action"": ""PirateMouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIControl"",
            ""id"": ""5a09c489-53f2-4717-8c18-e4d2b7368b4d"",
            ""actions"": [
                {
                    ""name"": ""UITest"",
                    ""type"": ""Button"",
                    ""id"": ""1addd8f9-e3cd-4318-bb0a-41718839943f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17fc1675-c3cd-4be1-a36b-1935e178d836"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UITest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""K+M"",
            ""bindingGroup"": ""K+M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Xbox Controller"",
            ""bindingGroup"": ""Xbox Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ShipControl
        m_ShipControl = asset.FindActionMap("ShipControl", throwIfNotFound: true);
        m_ShipControl_ShipAccelerate = m_ShipControl.FindAction("ShipAccelerate", throwIfNotFound: true);
        m_ShipControl_ShipTurn = m_ShipControl.FindAction("ShipTurn", throwIfNotFound: true);
        m_ShipControl_ShipCameraTurn = m_ShipControl.FindAction("ShipCameraTurn", throwIfNotFound: true);
        m_ShipControl_ShipMousePos = m_ShipControl.FindAction("ShipMousePos", throwIfNotFound: true);
        m_ShipControl_ShipSwap = m_ShipControl.FindAction("ShipSwap", throwIfNotFound: true);
        // PirateControl
        m_PirateControl = asset.FindActionMap("PirateControl", throwIfNotFound: true);
        m_PirateControl_PirateForward = m_PirateControl.FindAction("PirateForward", throwIfNotFound: true);
        m_PirateControl_PirateStrafe = m_PirateControl.FindAction("PirateStrafe", throwIfNotFound: true);
        m_PirateControl_PirateCameraRotate = m_PirateControl.FindAction("PirateCameraRotate", throwIfNotFound: true);
        m_PirateControl_PirateMousePos = m_PirateControl.FindAction("PirateMousePos", throwIfNotFound: true);
        m_PirateControl_PirateSwap = m_PirateControl.FindAction("PirateSwap", throwIfNotFound: true);
        m_PirateControl_PirateInteract = m_PirateControl.FindAction("PirateInteract", throwIfNotFound: true);
        m_PirateControl_PirateSubmit = m_PirateControl.FindAction("PirateSubmit", throwIfNotFound: true);
        m_PirateControl_PirateMouseClick = m_PirateControl.FindAction("PirateMouseClick", throwIfNotFound: true);
        // UIControl
        m_UIControl = asset.FindActionMap("UIControl", throwIfNotFound: true);
        m_UIControl_UITest = m_UIControl.FindAction("UITest", throwIfNotFound: true);
    }

    ~@PirateController()
    {
        UnityEngine.Debug.Assert(!m_ShipControl.enabled, "This will cause a leak and performance issues, PirateController.ShipControl.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PirateControl.enabled, "This will cause a leak and performance issues, PirateController.PirateControl.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UIControl.enabled, "This will cause a leak and performance issues, PirateController.UIControl.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShipControl
    private readonly InputActionMap m_ShipControl;
    private List<IShipControlActions> m_ShipControlActionsCallbackInterfaces = new List<IShipControlActions>();
    private readonly InputAction m_ShipControl_ShipAccelerate;
    private readonly InputAction m_ShipControl_ShipTurn;
    private readonly InputAction m_ShipControl_ShipCameraTurn;
    private readonly InputAction m_ShipControl_ShipMousePos;
    private readonly InputAction m_ShipControl_ShipSwap;
    /// <summary>
    /// Provides access to input actions defined in input action map "ShipControl".
    /// </summary>
    public struct ShipControlActions
    {
        private @PirateController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ShipControlActions(@PirateController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "ShipControl/ShipAccelerate".
        /// </summary>
        public InputAction @ShipAccelerate => m_Wrapper.m_ShipControl_ShipAccelerate;
        /// <summary>
        /// Provides access to the underlying input action "ShipControl/ShipTurn".
        /// </summary>
        public InputAction @ShipTurn => m_Wrapper.m_ShipControl_ShipTurn;
        /// <summary>
        /// Provides access to the underlying input action "ShipControl/ShipCameraTurn".
        /// </summary>
        public InputAction @ShipCameraTurn => m_Wrapper.m_ShipControl_ShipCameraTurn;
        /// <summary>
        /// Provides access to the underlying input action "ShipControl/ShipMousePos".
        /// </summary>
        public InputAction @ShipMousePos => m_Wrapper.m_ShipControl_ShipMousePos;
        /// <summary>
        /// Provides access to the underlying input action "ShipControl/ShipSwap".
        /// </summary>
        public InputAction @ShipSwap => m_Wrapper.m_ShipControl_ShipSwap;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_ShipControl; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ShipControlActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ShipControlActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ShipControlActions" />
        public void AddCallbacks(IShipControlActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipControlActionsCallbackInterfaces.Add(instance);
            @ShipAccelerate.started += instance.OnShipAccelerate;
            @ShipAccelerate.performed += instance.OnShipAccelerate;
            @ShipAccelerate.canceled += instance.OnShipAccelerate;
            @ShipTurn.started += instance.OnShipTurn;
            @ShipTurn.performed += instance.OnShipTurn;
            @ShipTurn.canceled += instance.OnShipTurn;
            @ShipCameraTurn.started += instance.OnShipCameraTurn;
            @ShipCameraTurn.performed += instance.OnShipCameraTurn;
            @ShipCameraTurn.canceled += instance.OnShipCameraTurn;
            @ShipMousePos.started += instance.OnShipMousePos;
            @ShipMousePos.performed += instance.OnShipMousePos;
            @ShipMousePos.canceled += instance.OnShipMousePos;
            @ShipSwap.started += instance.OnShipSwap;
            @ShipSwap.performed += instance.OnShipSwap;
            @ShipSwap.canceled += instance.OnShipSwap;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ShipControlActions" />
        private void UnregisterCallbacks(IShipControlActions instance)
        {
            @ShipAccelerate.started -= instance.OnShipAccelerate;
            @ShipAccelerate.performed -= instance.OnShipAccelerate;
            @ShipAccelerate.canceled -= instance.OnShipAccelerate;
            @ShipTurn.started -= instance.OnShipTurn;
            @ShipTurn.performed -= instance.OnShipTurn;
            @ShipTurn.canceled -= instance.OnShipTurn;
            @ShipCameraTurn.started -= instance.OnShipCameraTurn;
            @ShipCameraTurn.performed -= instance.OnShipCameraTurn;
            @ShipCameraTurn.canceled -= instance.OnShipCameraTurn;
            @ShipMousePos.started -= instance.OnShipMousePos;
            @ShipMousePos.performed -= instance.OnShipMousePos;
            @ShipMousePos.canceled -= instance.OnShipMousePos;
            @ShipSwap.started -= instance.OnShipSwap;
            @ShipSwap.performed -= instance.OnShipSwap;
            @ShipSwap.canceled -= instance.OnShipSwap;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ShipControlActions.UnregisterCallbacks(IShipControlActions)" />.
        /// </summary>
        /// <seealso cref="ShipControlActions.UnregisterCallbacks(IShipControlActions)" />
        public void RemoveCallbacks(IShipControlActions instance)
        {
            if (m_Wrapper.m_ShipControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ShipControlActions.AddCallbacks(IShipControlActions)" />
        /// <seealso cref="ShipControlActions.RemoveCallbacks(IShipControlActions)" />
        /// <seealso cref="ShipControlActions.UnregisterCallbacks(IShipControlActions)" />
        public void SetCallbacks(IShipControlActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ShipControlActions" /> instance referencing this action map.
    /// </summary>
    public ShipControlActions @ShipControl => new ShipControlActions(this);

    // PirateControl
    private readonly InputActionMap m_PirateControl;
    private List<IPirateControlActions> m_PirateControlActionsCallbackInterfaces = new List<IPirateControlActions>();
    private readonly InputAction m_PirateControl_PirateForward;
    private readonly InputAction m_PirateControl_PirateStrafe;
    private readonly InputAction m_PirateControl_PirateCameraRotate;
    private readonly InputAction m_PirateControl_PirateMousePos;
    private readonly InputAction m_PirateControl_PirateSwap;
    private readonly InputAction m_PirateControl_PirateInteract;
    private readonly InputAction m_PirateControl_PirateSubmit;
    private readonly InputAction m_PirateControl_PirateMouseClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "PirateControl".
    /// </summary>
    public struct PirateControlActions
    {
        private @PirateController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PirateControlActions(@PirateController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "PirateControl/PirateForward".
        /// </summary>
        public InputAction @PirateForward => m_Wrapper.m_PirateControl_PirateForward;
        /// <summary>
        /// Provides access to the underlying input action "PirateControl/PirateStrafe".
        /// </summary>
        public InputAction @PirateStrafe => m_Wrapper.m_PirateControl_PirateStrafe;
        /// <summary>
        /// Provides access to the underlying input action "PirateControl/PirateCameraRotate".
        /// </summary>
        public InputAction @PirateCameraRotate => m_Wrapper.m_PirateControl_PirateCameraRotate;
        /// <summary>
        /// Provides access to the underlying input action "PirateControl/PirateMousePos".
        /// </summary>
        public InputAction @PirateMousePos => m_Wrapper.m_PirateControl_PirateMousePos;
        /// <summary>
        /// Provides access to the underlying input action "PirateControl/PirateSwap".
        /// </summary>
        public InputAction @PirateSwap => m_Wrapper.m_PirateControl_PirateSwap;
        /// <summary>
        /// Provides access to the underlying input action "PirateControl/PirateInteract".
        /// </summary>
        public InputAction @PirateInteract => m_Wrapper.m_PirateControl_PirateInteract;
        /// <summary>
        /// Provides access to the underlying input action "PirateControl/PirateSubmit".
        /// </summary>
        public InputAction @PirateSubmit => m_Wrapper.m_PirateControl_PirateSubmit;
        /// <summary>
        /// Provides access to the underlying input action "PirateControl/PirateMouseClick".
        /// </summary>
        public InputAction @PirateMouseClick => m_Wrapper.m_PirateControl_PirateMouseClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_PirateControl; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PirateControlActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PirateControlActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PirateControlActions" />
        public void AddCallbacks(IPirateControlActions instance)
        {
            if (instance == null || m_Wrapper.m_PirateControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PirateControlActionsCallbackInterfaces.Add(instance);
            @PirateForward.started += instance.OnPirateForward;
            @PirateForward.performed += instance.OnPirateForward;
            @PirateForward.canceled += instance.OnPirateForward;
            @PirateStrafe.started += instance.OnPirateStrafe;
            @PirateStrafe.performed += instance.OnPirateStrafe;
            @PirateStrafe.canceled += instance.OnPirateStrafe;
            @PirateCameraRotate.started += instance.OnPirateCameraRotate;
            @PirateCameraRotate.performed += instance.OnPirateCameraRotate;
            @PirateCameraRotate.canceled += instance.OnPirateCameraRotate;
            @PirateMousePos.started += instance.OnPirateMousePos;
            @PirateMousePos.performed += instance.OnPirateMousePos;
            @PirateMousePos.canceled += instance.OnPirateMousePos;
            @PirateSwap.started += instance.OnPirateSwap;
            @PirateSwap.performed += instance.OnPirateSwap;
            @PirateSwap.canceled += instance.OnPirateSwap;
            @PirateInteract.started += instance.OnPirateInteract;
            @PirateInteract.performed += instance.OnPirateInteract;
            @PirateInteract.canceled += instance.OnPirateInteract;
            @PirateSubmit.started += instance.OnPirateSubmit;
            @PirateSubmit.performed += instance.OnPirateSubmit;
            @PirateSubmit.canceled += instance.OnPirateSubmit;
            @PirateMouseClick.started += instance.OnPirateMouseClick;
            @PirateMouseClick.performed += instance.OnPirateMouseClick;
            @PirateMouseClick.canceled += instance.OnPirateMouseClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PirateControlActions" />
        private void UnregisterCallbacks(IPirateControlActions instance)
        {
            @PirateForward.started -= instance.OnPirateForward;
            @PirateForward.performed -= instance.OnPirateForward;
            @PirateForward.canceled -= instance.OnPirateForward;
            @PirateStrafe.started -= instance.OnPirateStrafe;
            @PirateStrafe.performed -= instance.OnPirateStrafe;
            @PirateStrafe.canceled -= instance.OnPirateStrafe;
            @PirateCameraRotate.started -= instance.OnPirateCameraRotate;
            @PirateCameraRotate.performed -= instance.OnPirateCameraRotate;
            @PirateCameraRotate.canceled -= instance.OnPirateCameraRotate;
            @PirateMousePos.started -= instance.OnPirateMousePos;
            @PirateMousePos.performed -= instance.OnPirateMousePos;
            @PirateMousePos.canceled -= instance.OnPirateMousePos;
            @PirateSwap.started -= instance.OnPirateSwap;
            @PirateSwap.performed -= instance.OnPirateSwap;
            @PirateSwap.canceled -= instance.OnPirateSwap;
            @PirateInteract.started -= instance.OnPirateInteract;
            @PirateInteract.performed -= instance.OnPirateInteract;
            @PirateInteract.canceled -= instance.OnPirateInteract;
            @PirateSubmit.started -= instance.OnPirateSubmit;
            @PirateSubmit.performed -= instance.OnPirateSubmit;
            @PirateSubmit.canceled -= instance.OnPirateSubmit;
            @PirateMouseClick.started -= instance.OnPirateMouseClick;
            @PirateMouseClick.performed -= instance.OnPirateMouseClick;
            @PirateMouseClick.canceled -= instance.OnPirateMouseClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PirateControlActions.UnregisterCallbacks(IPirateControlActions)" />.
        /// </summary>
        /// <seealso cref="PirateControlActions.UnregisterCallbacks(IPirateControlActions)" />
        public void RemoveCallbacks(IPirateControlActions instance)
        {
            if (m_Wrapper.m_PirateControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PirateControlActions.AddCallbacks(IPirateControlActions)" />
        /// <seealso cref="PirateControlActions.RemoveCallbacks(IPirateControlActions)" />
        /// <seealso cref="PirateControlActions.UnregisterCallbacks(IPirateControlActions)" />
        public void SetCallbacks(IPirateControlActions instance)
        {
            foreach (var item in m_Wrapper.m_PirateControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PirateControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PirateControlActions" /> instance referencing this action map.
    /// </summary>
    public PirateControlActions @PirateControl => new PirateControlActions(this);

    // UIControl
    private readonly InputActionMap m_UIControl;
    private List<IUIControlActions> m_UIControlActionsCallbackInterfaces = new List<IUIControlActions>();
    private readonly InputAction m_UIControl_UITest;
    /// <summary>
    /// Provides access to input actions defined in input action map "UIControl".
    /// </summary>
    public struct UIControlActions
    {
        private @PirateController m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UIControlActions(@PirateController wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UIControl/UITest".
        /// </summary>
        public InputAction @UITest => m_Wrapper.m_UIControl_UITest;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UIControl; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UIControlActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UIControlActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UIControlActions" />
        public void AddCallbacks(IUIControlActions instance)
        {
            if (instance == null || m_Wrapper.m_UIControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Add(instance);
            @UITest.started += instance.OnUITest;
            @UITest.performed += instance.OnUITest;
            @UITest.canceled += instance.OnUITest;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UIControlActions" />
        private void UnregisterCallbacks(IUIControlActions instance)
        {
            @UITest.started -= instance.OnUITest;
            @UITest.performed -= instance.OnUITest;
            @UITest.canceled -= instance.OnUITest;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UIControlActions.UnregisterCallbacks(IUIControlActions)" />.
        /// </summary>
        /// <seealso cref="UIControlActions.UnregisterCallbacks(IUIControlActions)" />
        public void RemoveCallbacks(IUIControlActions instance)
        {
            if (m_Wrapper.m_UIControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UIControlActions.AddCallbacks(IUIControlActions)" />
        /// <seealso cref="UIControlActions.RemoveCallbacks(IUIControlActions)" />
        /// <seealso cref="UIControlActions.UnregisterCallbacks(IUIControlActions)" />
        public void SetCallbacks(IUIControlActions instance)
        {
            foreach (var item in m_Wrapper.m_UIControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UIControlActions" /> instance referencing this action map.
    /// </summary>
    public UIControlActions @UIControl => new UIControlActions(this);
    private int m_KMSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("K+M");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    private int m_XboxControllerSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme XboxControllerScheme
    {
        get
        {
            if (m_XboxControllerSchemeIndex == -1) m_XboxControllerSchemeIndex = asset.FindControlSchemeIndex("Xbox Controller");
            return asset.controlSchemes[m_XboxControllerSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "ShipControl" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ShipControlActions.AddCallbacks(IShipControlActions)" />
    /// <seealso cref="ShipControlActions.RemoveCallbacks(IShipControlActions)" />
    public interface IShipControlActions
    {
        /// <summary>
        /// Method invoked when associated input action "ShipAccelerate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShipAccelerate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ShipTurn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShipTurn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ShipCameraTurn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShipCameraTurn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ShipMousePos" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShipMousePos(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ShipSwap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnShipSwap(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "PirateControl" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PirateControlActions.AddCallbacks(IPirateControlActions)" />
    /// <seealso cref="PirateControlActions.RemoveCallbacks(IPirateControlActions)" />
    public interface IPirateControlActions
    {
        /// <summary>
        /// Method invoked when associated input action "PirateForward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPirateForward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PirateStrafe" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPirateStrafe(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PirateCameraRotate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPirateCameraRotate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PirateMousePos" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPirateMousePos(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PirateSwap" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPirateSwap(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PirateInteract" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPirateInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PirateSubmit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPirateSubmit(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PirateMouseClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPirateMouseClick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UIControl" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UIControlActions.AddCallbacks(IUIControlActions)" />
    /// <seealso cref="UIControlActions.RemoveCallbacks(IUIControlActions)" />
    public interface IUIControlActions
    {
        /// <summary>
        /// Method invoked when associated input action "UITest" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUITest(InputAction.CallbackContext context);
    }
}
